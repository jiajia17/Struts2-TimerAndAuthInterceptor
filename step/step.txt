本实例是struts2如何创建以及如何自定义拦截器的demo

1---
	去struts2的app文件夹里面找到struts2-blank.war项目解压，然后去web-inf/lib目录下拷贝所有的jar文件
	这些jar文件就是构建一个基础的struts2项目所必须得jar文件，拷贝完成后放到web项目WebContent/WEB-INF/lib
	目录下。在lib目录下选中所有拷贝来的jar文件，鼠标右键，build path   添加到build path  ，然后就能在
	Referenced Libraries目录下看到已经加载了所有的jar文件。
2---
	拷贝web.xml 和Struts.xml 到你自己对应的工程目录下。
	web.xml位置struts2-blank\WEB-INF下			-->WebContent\WEB-INf下
	struts.xml位置struts2-blank\WEB-INF\src\java  --> 工程src目录下
3---
	稍微修改一下刚才拷贝的配置文件。
	
	
	
----配置action并自定义一个用来计算action执行时间的拦截器。
step1---test_start.jsp   和web-inf下的test_start_end.jsp
	TestAction.java
	TimerInterceptor.java
	struts.xml

	
	
	
step2---自定义一个用来控制用户访问权限的拦截器(当你登录后如果输入authAction2也会跳转到成功的界面，是因为你
		在访问authAction1登录的时候使用session注入的登录信息，而在输入authAction2访问的时候，我们
		使用自定义的拦截器来获取session是否有值，有值就直接跳转到登录的界面，从而实现了访问权限的校验，而且
		此处使用的是domianModel形式获取的值。
		test_start.jsp   和web-inf下的test_start_end.jsp
		AuthAction.java
		AuthInterceptor.java
		struts.xml
		User.java	

step3---测试前后台传递参数的方法以及显示	
		前台传参到后台的方式有三种。1-属性的方式，2-javabean形式也叫demianModel形式，3-ModelDriven形式
		其中12两种方法是不同的地方就是2中是在action里面声明private User user;并且提供user的getter和setter方法
		1中
		--1，直接在action中写属性，属性名称随便起，只要提交的jsp能够对应起来就行，然后取值的jsp页面也是一样的名字。
		--2，在action中要有getter setter方法
		2中
		--1，需要写实体类User getset方法
		--2，提供对象属性，不需要实例化，在当前action里面提供getset方法   --private User user;
		--3，提交数据的jsp里面的字段属性得写成  实体类.属性的方式
		--4，显示数据的时候需要写成<s:property value="user.userName"/>
		3中不同：
		--1，需要写实体类student，
		--2，action需要实现ModelDriven接口，并且指定泛型Object
		--3，提供实例化对象  private Student student=new Student();
		--4，重写getModel()方法，返回student
		--5，提供execute()方法。
		--6，对应的jsp页面name属性是实体类的属性名字，成功页面的jsp取值的时候也是实体类属性名<s:property value="name"/><br/>
		含：
		test_start.jsp test_start_param.jsp
		ParamAction.java
		struts.xml	
	
step4---Convention插件的约定	struts2-convention-plugin-2.3.32.jar


step5---struts2标签

step6---namespace

step7---类型转换 自定义类型转换器
		其实就是类似于使用domianModel形式从前台往后台传递参数的时候，需要在前台页面中使用name=user.username的形式传递参数的情况。
		类型转换器：
			局部范围类型的转换器，	actionName-conversion.properties 例如f：LoginAction-conversion.properties
						内容：// 属性名=转换器类的位置
							walker=MyPackage.WalkerConvert 创建的该文件应该和对应的Action位于同一个包下
			全局范围内注册一个类型转换器，xwork-conversion.properties
						内容：// 属性名=转换器类的位置
							walker=MyPackage.WalkerConvert
			使用注解注册一个类型转换器
		类型转换的错误处理 ：
			框架为我们在拦截器栈中注册了一个拦截器：convertionError，该拦截器专门用于拦截类型转换异常，
			一旦该拦截器拦截到异常产生则会封装所有的异常信息到ActionContext中，然后跳转到input处理结果页面，
			所以一般我们在为Action添加处理结果的时候会为其添加一个input页面
			我们只需要为Action添加一个input的处理结果即可，当发生类型转换失败的时候就会封装错误信息并跳转到input页面。

setp8----数据校验
		
		命名：且一般一个校验文件只服务一个Action   <ActionName>-validation.xml
		两种校验配置风格 
			1.用field元素来配置的数据校验规则
				该文件有个根元素 validators ，使用field 作为一级子元素，该元素将对应于Action实例中实际的属性，它有一个name属性，
				该属性就是用于指定此field元素配置的是Action的哪个实例属性，有几个实例属性就应该有几个field元素。
				我们由field元素可以定位到Action实例中具体的某个属性，使用field-validator元素
				为给属性指定校验器（Struts默认提供的检验器，具体有关内置的校验器后文详细介绍），
				param 元素用于指定校验的参数，message元素用于指定不符合校验规则时输出的信息。
			2.使用validator取代field作为一级子元素，用fieldName属性指定对应的Action实例属性（不常用）
			
				test-validation-start.jsp	test-validation-end.jsp input.jsp
				TestValidationAction.java TestValidationAction-validation.xml
				
		为不同Action处理逻辑配置不同的校验配置
			同一个action有多个不同的处理逻辑，例如某个action既可以处理用户注册请求也可以处理用户登录请求，但是对于这两种截然不同的请求，
			我们的数据校验却不尽相同,两个页面login和register，虽然提交的action名称不一样，但是却是同一个action.java文件
			此时我们需要创建两个数据校验文件，一个用于校验请求login，一个用于校验请求regist。规则：<ActionName>-<ActionAliasName具体的action名>-validation.xml
			TestValidation1Action-testValidation1login-validation.xml
			TestValidation1Action-testValidation1register-validation.xml
			TestValidation1Action.java
			test-validation1-login.jsp test-validation1-register.jsp
		 	test-validation1-end.jsp input.jsp
		 	
			 
			 
		详解struts2框架内置的几种校验器 
			xwork-core-2.3.32.jar
			/com/opensymphony/xwork2/validator/validators/default.xml
		自定义校验器
			在actionsupport中定义一个方法volidate()方法
			对于之前介绍的一个Action类响应多个请求时候对数据校验的不同形态，在我们自定义校验器中也是可以实现的，只是定义的方法名有所区别，例如：
				响应login处理逻辑的自定义校验方法命名为：validateLogin()
				响应regist处理逻辑的自定义校验方法命名为：validateRegist()
step9---文件上传下载

		
	
	
